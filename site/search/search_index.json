{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the SexyCoders Docs Our sexy homepage sexycoders.org . For further assistance please contact us at team@sexycoders.org .","title":"Home"},{"location":"#welcome-to-the-sexycoders-docs","text":"Our sexy homepage sexycoders.org . For further assistance please contact us at team@sexycoders.org .","title":"Welcome to the SexyCoders Docs"},{"location":"api/authentication/","text":"Token retrieval and Parsing Getting a Token Request a token from the authentication server. The following CURL command can be used, but any equivalent in another language will work as well: curl -X POST \"https://sso.sexycoders.org/auth/realms/sexycoders.org/protocol/openid-connect/token\" \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -d \"client_id=your_client_id\" \\ -d \"client_secret=your_client_secret\" \\ -d \"grant_type=client_credentials\" This is a client grant; passwords or usernames are not required. However, the client secret must be kept absolutely safe. Never share it and always use HTTPS when posting. The server should refuse non-HTTPS requests, but it is essential to ensure this. Dont forget to replace placeholders with your actual credentials! Expected Response The server will respond with something like the following: { \"access_token\": \"...\", \"expires_in\": 300, \"refresh_expires_in\": 0, \"token_type\": \"Bearer\", \"not-before-policy\": 0, \"scope\": \"email profile\" } The 'access_token' field is the token you need. Posting to the API With the token, you can post to the API using the following command: curl -X POST -H \"Content-Type: application/json\" \\ -d '{\"token\": \"your_token_here\"}' \\ https://your_api/path_to_endpoint Replace \"your_api/path_to_endpoint\" with the actual api endpoint location and \"your_token_here\" with the token you obtained use the correct endpoint path.","title":"Authentication"},{"location":"api/authentication/#token-retrieval-and-parsing","text":"","title":"Token retrieval and Parsing"},{"location":"api/authentication/#getting-a-token","text":"Request a token from the authentication server. The following CURL command can be used, but any equivalent in another language will work as well: curl -X POST \"https://sso.sexycoders.org/auth/realms/sexycoders.org/protocol/openid-connect/token\" \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -d \"client_id=your_client_id\" \\ -d \"client_secret=your_client_secret\" \\ -d \"grant_type=client_credentials\" This is a client grant; passwords or usernames are not required. However, the client secret must be kept absolutely safe. Never share it and always use HTTPS when posting. The server should refuse non-HTTPS requests, but it is essential to ensure this. Dont forget to replace placeholders with your actual credentials!","title":"Getting a Token"},{"location":"api/authentication/#expected-response","text":"The server will respond with something like the following: { \"access_token\": \"...\", \"expires_in\": 300, \"refresh_expires_in\": 0, \"token_type\": \"Bearer\", \"not-before-policy\": 0, \"scope\": \"email profile\" } The 'access_token' field is the token you need.","title":"Expected Response"},{"location":"api/authentication/#posting-to-the-api","text":"With the token, you can post to the API using the following command: curl -X POST -H \"Content-Type: application/json\" \\ -d '{\"token\": \"your_token_here\"}' \\ https://your_api/path_to_endpoint Replace \"your_api/path_to_endpoint\" with the actual api endpoint location and \"your_token_here\" with the token you obtained use the correct endpoint path.","title":"Posting to the API"},{"location":"api/verify/","text":"Authentication and API Usage Token Verification curl -X POST \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -d \"client_id=<your_client_id>\" \\ -d \"client_secret=<your_client_secret>\"\\ -d \"token=<token_value>\" \\ https://sso.sexycoders.org/auth/realms/<your_realm>/protocol/openid-connect/token/introspect This will verify if the token is active or not by returning: HUGE PILE OF JSON SHIT or {\"active\":false} You can then procceed to the execution or not of the rest of the code. Formatted response As you might notice by running the above,it returns a lot of pretty much useless \ud83d\udca9. We can get a formatted and usable return by posting the userinfo endpoint https://sso.sexycoders.org/auth/realms/<your_realm>/protocol/openid-connect/userinfo The response for an active token will then look like this: { \"sub\":\"...\", \"email_verified\":true, \"preferred_username\":\"username\", \"email\":\"email\" } A lot better aint it ? This will also include fields like Name or Last Name if present in the users profile. Endpoint listing We can find the list of available endpoints by using https://sso.sexycoders.org/auth/realms/<your_realm>/.well-known/openid-configuration Response should be a json file with the openid config of the server. It will also contain the available endpoints.","title":"Token Verification"},{"location":"api/verify/#authentication-and-api-usage","text":"","title":"Authentication and API Usage"},{"location":"api/verify/#token-verification","text":"curl -X POST \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -d \"client_id=<your_client_id>\" \\ -d \"client_secret=<your_client_secret>\"\\ -d \"token=<token_value>\" \\ https://sso.sexycoders.org/auth/realms/<your_realm>/protocol/openid-connect/token/introspect This will verify if the token is active or not by returning: HUGE PILE OF JSON SHIT or {\"active\":false} You can then procceed to the execution or not of the rest of the code.","title":"Token Verification"},{"location":"api/verify/#formatted-response","text":"As you might notice by running the above,it returns a lot of pretty much useless \ud83d\udca9. We can get a formatted and usable return by posting the userinfo endpoint https://sso.sexycoders.org/auth/realms/<your_realm>/protocol/openid-connect/userinfo The response for an active token will then look like this: { \"sub\":\"...\", \"email_verified\":true, \"preferred_username\":\"username\", \"email\":\"email\" } A lot better aint it ? This will also include fields like Name or Last Name if present in the users profile.","title":"Formatted response"},{"location":"api/verify/#endpoint-listing","text":"We can find the list of available endpoints by using https://sso.sexycoders.org/auth/realms/<your_realm>/.well-known/openid-configuration Response should be a json file with the openid config of the server. It will also contain the available endpoints.","title":"Endpoint listing"},{"location":"for_developers/helpers/","text":"Helper Commands To automate and simplify many everyday tasks, our team has created and maintains a variety of helpers under /bin in the SexyCoders main repository. sc-docker-build The docker build script builds docker images using the secycoders naming convention and automates versioning. It also provides additionall options to change the name, push to the registry and include the \"latest\" tag when pushing for production. We can see the available commands using the \"--help\" flag: Usage: ./sc-docker-build [OPTIONS] Options: -h, --help Show this help message and exit -p, --push Optionally push the image to the registry -l, --latest Additionally tag the image as 'latest' -n, --name NAME The name to be used for the Docker image (optional) The name is determined in the following oder: \"--name\" flag is provided name is read from local \"name\" file name is generated from current dir name \u26a0 In case a --name flag is provided but a name file already exists you will be prompted on whether to overwrite.","title":"Helper Commands"},{"location":"for_developers/helpers/#helper-commands","text":"To automate and simplify many everyday tasks, our team has created and maintains a variety of helpers under /bin in the SexyCoders main repository.","title":"Helper Commands"},{"location":"for_developers/helpers/#sc-docker-build","text":"The docker build script builds docker images using the secycoders naming convention and automates versioning. It also provides additionall options to change the name, push to the registry and include the \"latest\" tag when pushing for production. We can see the available commands using the \"--help\" flag: Usage: ./sc-docker-build [OPTIONS] Options: -h, --help Show this help message and exit -p, --push Optionally push the image to the registry -l, --latest Additionally tag the image as 'latest' -n, --name NAME The name to be used for the Docker image (optional) The name is determined in the following oder: \"--name\" flag is provided name is read from local \"name\" file name is generated from current dir name \u26a0 In case a --name flag is provided but a name file already exists you will be prompted on whether to overwrite.","title":"sc-docker-build"},{"location":"for_developers/versioning/","text":"Naming Conventions and Versioning Since the SexyCoders ecosystem is an open source and community based project, we have implemented and are strictly abiding to naming conventions so that everyone can follow. Please follow them or you will risk your work not being approved by our review team. Helpers To help navigate and automate these and many other proccesses we have created a set of commands under /bin the SexyCoders main repository. It is suggested to use those instead! Find documentation on them here . If you still wish to do it by hand read on. Please also look in the individual dirs for \".format\" files that will direct you further for the specifics of each service (like name conventions, reserved naems, legacy compatibillity issues etc.) General Format The general date format for versioning is 14-05-2023_1231_EEST and can be produced using the following: date +'%d-%m-%Y_%H%M_%Z' This date format was introduced in March 2023 and applied to all aspects of the sexycoders ecosystem to create a unified approach to versioning. We expect it to have fully replaced any old versioning within a couple of months. Docker For docker please use vXX_$(date +'%d-%m-%Y_%H%M_%Z') for example if building \"example_image\" and latest version is 12 do: docker build -t registry.sexycoders.org/example_image:v12_$(date +'%d-%m-%Y_%H%M_%Z') Git Branches For git branches use a similar approach : <branch_name>_$(date +'%d-%m-%Y_%H%M_%Z') For example to create a branch named new_branch from the master: git checkout -B new_branch_$(date +'%d-%m-%Y_%H%M_%Z')","title":"Names and Versioning"},{"location":"for_developers/versioning/#naming-conventions-and-versioning","text":"Since the SexyCoders ecosystem is an open source and community based project, we have implemented and are strictly abiding to naming conventions so that everyone can follow. Please follow them or you will risk your work not being approved by our review team.","title":"Naming Conventions and Versioning"},{"location":"for_developers/versioning/#helpers","text":"To help navigate and automate these and many other proccesses we have created a set of commands under /bin the SexyCoders main repository. It is suggested to use those instead! Find documentation on them here . If you still wish to do it by hand read on. Please also look in the individual dirs for \".format\" files that will direct you further for the specifics of each service (like name conventions, reserved naems, legacy compatibillity issues etc.)","title":"Helpers"},{"location":"for_developers/versioning/#general-format","text":"The general date format for versioning is 14-05-2023_1231_EEST and can be produced using the following: date +'%d-%m-%Y_%H%M_%Z' This date format was introduced in March 2023 and applied to all aspects of the sexycoders ecosystem to create a unified approach to versioning. We expect it to have fully replaced any old versioning within a couple of months.","title":"General Format"},{"location":"for_developers/versioning/#docker","text":"For docker please use vXX_$(date +'%d-%m-%Y_%H%M_%Z') for example if building \"example_image\" and latest version is 12 do: docker build -t registry.sexycoders.org/example_image:v12_$(date +'%d-%m-%Y_%H%M_%Z')","title":"Docker"},{"location":"for_developers/versioning/#git-branches","text":"For git branches use a similar approach : <branch_name>_$(date +'%d-%m-%Y_%H%M_%Z') For example to create a branch named new_branch from the master: git checkout -B new_branch_$(date +'%d-%m-%Y_%H%M_%Z')","title":"Git Branches"}]}